---
source: bin/tests/main.rs
expression: "& stdout"

---
--- tests/data/useless_parens.nix
+++ tests/data/useless_parens.nix [fixed]
@@ -1,22 +1,22 @@
 let
   # parens around primitives
   a = {
-    b = ("hello");
-    c = (d);
-    e = ({ f = 2; });
+    b = "hello";
+    c = d;
+    e = { f = 2; };
   };
 
   # parens around let-value
-  g = (1 + 2);
-  h = ({ inherit i; });
+  g = 1 + 2;
+  h = { inherit i; };
 
   # binary exprs with superflous parens
   # TODO: we could implement associativity check to remove more redundant parens in the future
   f =
     let id = x: x; in
-    (id [3])
-    ++ (id [1] ++ [2])
+    id [3]
+    ++ id [1] ++ [2]
   ;
 
   # binary exprs with necessary parens
   u =
@@ -25,33 +25,33 @@
     ;
 
   # precedence
   prec1 =
-    4 + (5 * 3)
+    4 + 5 * 3
     ;
   prec2 =
-    (4 * 5) / 5
+    4 * 5 / 5
     ;
   prec3_no =
     4 * (5 / 5)
     ;
 
   # primitive in binop
   primitive_binop =
-    [1] ++ ([2])
+    [1] ++ [2]
     ;
 
   # string concat
   s =
-    (builtins.readFile ./x.txt)
-    + (lib.optionalString true ''
+    builtins.readFile ./x.txt
+    + lib.optionalString true ''
       foo
-    '')
-    + (lib.optionalString true ''
+    ''
+    + lib.optionalString true ''
       bar
-    '')
+    ''
     ;
 
   # TODO: function args etc.
 in
   # parens around let body
-  (null)
+  null


